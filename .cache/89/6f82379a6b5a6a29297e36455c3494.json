{"id":"uEek","dependencies":[{"name":"C:\\Users\\v\\Desktop\\FriedEggsGit3\\package.json","includedInParent":true,"mtime":1691178592854}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.FilmShader=void 0;var t={uniforms:{tDiffuse:{value:null},time:{value:0},nIntensity:{value:.5},sIntensity:{value:.05},sCount:{value:4096},grayscale:{value:1}},vertexShader:\"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",fragmentShader:\"\\n\\n\\t\\t#include <common>\\n\\n\\t\\t// control parameter\\n\\t\\tuniform float time;\\n\\n\\t\\tuniform bool grayscale;\\n\\n\\t\\t// noise effect intensity value (0 = no effect, 1 = full effect)\\n\\t\\tuniform float nIntensity;\\n\\n\\n\\n\\t\\tuniform sampler2D tDiffuse;\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t// sample the source\\n\\t\\t\\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\\n\\n\\t\\t// make some noise\\n\\t\\t\\tfloat dx = rand( vUv + time * vUv.x) / clamp(rand(vUv), 1.1,1.3);\\n\\n\\t\\t// add noise\\n\\t\\t\\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0 , 1.0 );\\n\\n\\n\\t\\t// interpolate between source and result by intensity\\n\\t\\t\\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\\n\\n\\t\\t// convert to grayscale if desired\\n\\t\\t\\tif( grayscale ) {\\n\\n\\t\\t\\t\\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\\n\\n\\t\\t}\"};exports.FilmShader=t;"},"sourceMaps":{"js":{"mappings":[{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":0}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":13}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":20}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":35}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":43}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":56}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":57}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":64}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":68}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":76}},{"source":"../static/shaders/FilmShader.js","original":{"line":89,"column":2},"generated":{"line":1,"column":92}},{"source":"../static/shaders/FilmShader.js","original":{"line":21,"column":0},"generated":{"line":1,"column":94}},{"source":"../static/shaders/FilmShader.js","name":"FilmShader","original":{"line":21,"column":6},"generated":{"line":1,"column":98}},{"source":"../static/shaders/FilmShader.js","original":{"line":21,"column":19},"generated":{"line":1,"column":100}},{"source":"../static/shaders/FilmShader.js","name":"uniforms","original":{"line":23,"column":4},"generated":{"line":1,"column":101}},{"source":"../static/shaders/FilmShader.js","original":{"line":23,"column":14},"generated":{"line":1,"column":110}},{"source":"../static/shaders/FilmShader.js","original":{"line":25,"column":8},"generated":{"line":1,"column":111}},{"source":"../static/shaders/FilmShader.js","original":{"line":25,"column":20},"generated":{"line":1,"column":120}},{"source":"../static/shaders/FilmShader.js","name":"value","original":{"line":25,"column":22},"generated":{"line":1,"column":121}},{"source":"../static/shaders/FilmShader.js","original":{"line":25,"column":29},"generated":{"line":1,"column":127}},{"source":"../static/shaders/FilmShader.js","original":{"line":26,"column":8},"generated":{"line":1,"column":133}},{"source":"../static/shaders/FilmShader.js","original":{"line":26,"column":16},"generated":{"line":1,"column":138}},{"source":"../static/shaders/FilmShader.js","name":"value","original":{"line":26,"column":18},"generated":{"line":1,"column":139}},{"source":"../static/shaders/FilmShader.js","original":{"line":26,"column":25},"generated":{"line":1,"column":145}},{"source":"../static/shaders/FilmShader.js","original":{"line":27,"column":8},"generated":{"line":1,"column":148}},{"source":"../static/shaders/FilmShader.js","original":{"line":27,"column":22},"generated":{"line":1,"column":159}},{"source":"../static/shaders/FilmShader.js","name":"value","original":{"line":27,"column":24},"generated":{"line":1,"column":160}},{"source":"../static/shaders/FilmShader.js","original":{"line":27,"column":31},"generated":{"line":1,"column":166}},{"source":"../static/shaders/FilmShader.js","original":{"line":28,"column":8},"generated":{"line":1,"column":170}},{"source":"../static/shaders/FilmShader.js","original":{"line":28,"column":22},"generated":{"line":1,"column":181}},{"source":"../static/shaders/FilmShader.js","name":"value","original":{"line":28,"column":24},"generated":{"line":1,"column":182}},{"source":"../static/shaders/FilmShader.js","original":{"line":28,"column":31},"generated":{"line":1,"column":188}},{"source":"../static/shaders/FilmShader.js","original":{"line":29,"column":8},"generated":{"line":1,"column":193}},{"source":"../static/shaders/FilmShader.js","original":{"line":29,"column":18},"generated":{"line":1,"column":200}},{"source":"../static/shaders/FilmShader.js","name":"value","original":{"line":29,"column":20},"generated":{"line":1,"column":201}},{"source":"../static/shaders/FilmShader.js","original":{"line":29,"column":27},"generated":{"line":1,"column":207}},{"source":"../static/shaders/FilmShader.js","original":{"line":30,"column":8},"generated":{"line":1,"column":213}},{"source":"../static/shaders/FilmShader.js","original":{"line":30,"column":21},"generated":{"line":1,"column":223}},{"source":"../static/shaders/FilmShader.js","name":"value","original":{"line":30,"column":23},"generated":{"line":1,"column":224}},{"source":"../static/shaders/FilmShader.js","original":{"line":30,"column":30},"generated":{"line":1,"column":230}},{"source":"../static/shaders/FilmShader.js","name":"vertexShader","original":{"line":34,"column":4},"generated":{"line":1,"column":234}},{"source":"../static/shaders/FilmShader.js","original":{"line":43,"column":4},"generated":{"line":1,"column":247}},{"source":"../static/shaders/FilmShader.js","name":"fragmentShader","original":{"line":45,"column":4},"generated":{"line":1,"column":405}},{"source":"../static/shaders/FilmShader.js","original":{"line":45,"column":20},"generated":{"line":1,"column":420}},{"source":"../static/shaders/FilmShader.js","name":"exports","original":{"line":89,"column":2},"generated":{"line":1,"column":1416}},{"source":"../static/shaders/FilmShader.js","name":"FilmShader","original":{"line":89,"column":2},"generated":{"line":1,"column":1424}},{"source":"../static/shaders/FilmShader.js","name":"FilmShader","original":{"line":89,"column":2},"generated":{"line":1,"column":1435}}],"sources":{"../static/shaders/FilmShader.js":"/**\r\n * Film grain & scanlines shader\r\n *\r\n * - ported from HLSL to WebGL / GLSL\r\n * https://web.archive.org/web/20210226214859/http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\r\n *\r\n * Screen Space Static Postprocessor\r\n *\r\n * Produces an analogue noise overlay similar to a film grain / TV static\r\n *\r\n * Original implementation and noise algorithm\r\n * Pat 'Hawthorne' Shearon\r\n *\r\n * Optimized scanlines + noise version with intensity scaling\r\n * Georg 'Leviathan' Steinrohder\r\n *\r\n * This version is provided under a Creative Commons Attribution 3.0 License\r\n * http://creativecommons.org/licenses/by/3.0/\r\n */\r\n\r\nconst FilmShader = {\r\n\r\n    uniforms: {\r\n\r\n        'tDiffuse': { value: null },\r\n        'time': { value: 0.0 },\r\n        'nIntensity': { value: 0.5 },\r\n        'sIntensity': { value: 0.05 },\r\n        'sCount': { value: 4096 },\r\n        'grayscale': { value: 1 }\r\n\r\n    },\r\n\r\n    vertexShader: /* glsl */`\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n\r\n    fragmentShader: /* glsl */`\r\n\r\n\t\t#include <common>\r\n\r\n\t\t// control parameter\r\n\t\tuniform float time;\r\n\r\n\t\tuniform bool grayscale;\r\n\r\n\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\r\n\t\tuniform float nIntensity;\r\n\r\n\r\n\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t// sample the source\r\n\t\t\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\r\n\r\n\t\t// make some noise\r\n\t\t\tfloat dx = rand( vUv + time * vUv.x) / clamp(rand(vUv), 1.1,1.3);\r\n\r\n\t\t// add noise\r\n\t\t\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0 , 1.0 );\r\n\r\n\r\n\t\t// interpolate between source and result by intensity\r\n\t\t\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\r\n\r\n\t\t// convert to grayscale if desired\r\n\t\t\tif( grayscale ) {\r\n\r\n\t\t\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\r\n\r\n\t\t}`,\r\n\r\n};\r\n\r\nexport { FilmShader };"},"lineCount":null}},"error":null,"hash":"cc1f5820b8463609fe61732bc2a3ecf4","cacheData":{"env":{}}}